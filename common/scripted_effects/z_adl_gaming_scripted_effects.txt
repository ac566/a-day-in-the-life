# #####
# Setup
# #####
gaming_setup_effect = {
	scope:activity = {
		every_participant = {
			set_variable = {
				name = gaming_winning_chance
				value = 0
			}
		}
	}
}

gaming_chess_setup_effect = {
	gaming_setup_effect = yes
	scope:activity = {
		set_local_variable = {
			name = gaming_type
			value = gaming_type_chess
		}
		every_participant = {
			trigger_event = {
				on_action = gaming_chess_event_selection
				days = gaming_initial_event_delay
			}
		}
		activity_owner = {
			trigger_event = {
				id = gaming.9000
				days = max_gaming_duration
			}
		}
	}
}

gaming_go_setup_effect = {
	gaming_setup_effect = yes
	scope:activity = {
		set_local_variable = {
			name = gaming_type
			value = gaming_type_go
		}
		every_participant = {
			trigger_event = {
				on_action = gaming_go_event_selection
				days = gaming_initial_event_delay
			}
		}
		activity_owner = {
			trigger_event = {
				id = gaming.9000
				days = max_gaming_duration
			}
		}
	}
}

gaming_wargame_setup_effect = {
	gaming_setup_effect = yes
	scope:activity = {
		set_local_variable = {
			name = gaming_type
			value = gaming_type_wargame
		}
		every_participant = {
			trigger_event = {
				on_action = gaming_wargame_event_selection
				days = gaming_initial_event_delay
			}
		}
		activity_owner = {
			trigger_event = {
				id = gaming.9000
				days = max_gaming_duration
			}
		}
	}
}

# #####################
# Activity Event chains
# #####################

# Triggers random chess event with default spacing
gaming_fire_correct_or_default_event_effect = {
  if = {
    limit = {
      local_var:gaming_type = gaming_type_chess
    }
    trigger_event = {
      on_action = gaming_chess_event_selection
      days = {
        min_gaming_event_spacing
        max_gaming_event_spacing
      }
    }
  }
  else_if = {
    limit = {
      local_var:gaming_type = gaming_type_go
    }
    trigger_event = {
      on_action = gaming_go_event_selection
      days = {
        min_gaming_event_spacing
        max_gaming_event_spacing
      }
    }
  }
  else_if = {
    limit = {
      local_var:gaming_type = gaming_type_wargame
    }
    trigger_event = {
      on_action = gaming_wargame_event_selection
      days = {
        min_gaming_event_spacing
        max_gaming_event_spacing
      }
    }
  }
}

# Decides either to fire another event or end the activity
gaming_fire_random_event_effect = {
	if = {
		limit = {
			NOT = {
				exists = local_var:num_of_gaming_events
			}
		}
		set_local_variable = {
			name = num_of_gaming_events
			value = 0
		}
		gaming_fire_correct_or_default_event_effect = yes
	}
	else = {
		change_local_variable = {
			name = num_of_gaming_events
			add = 1
		}
		if = {
			limit = {
				local_var:num_of_gaming_events < max_default_gaming_events
      }
      gaming_fire_correct_or_default_event_effect = yes
    }
		else = {
			gaming_end_my_events_effect = yes
		}
	}
}

# Adds participant (host or guest) to list of characters that have finished the activity
gaming_end_my_events_effect = {
	save_temporary_scope_as = finished_participant
	scope:activity = {
		add_to_variable_list = {
			name = finished_participants
			target = scope:finished_participant
		}
	}
}

# Effect for the guest's event when the activity ends
gaming_end_guest_effect = {
  hidden_effect = {
    gamer_points_gain_effect = {
      CHANGE = 1
    }
  }
  gamer_lifestyle_rank_up_check_effect = yes
  gaming_calculate_game_result_effect = yes
  if = {
    limit = {
      local_var:gaming_type = gaming_type_chess
    }
    add_character_modifier = {
      modifier = gaming_chess_modifier
      months = gaming_guest_cooldown
    }
  }
  else_if = {
    limit = {
      local_var:gaming_type = gaming_type_go
    }
    add_character_modifier = {
      modifier = gaming_go_modifier
      months = gaming_guest_cooldown
    }
  }
  else_if = {
    limit = {
      local_var:gaming_type = gaming_type_wargame
    }
    add_character_modifier = {
      modifier = gaming_wargame_modifier
      months = gaming_guest_cooldown
    }
  }
}

# Effect for the host's event when the activity ends
gaming_end_host_effect = {
  hidden_effect = {
    gamer_points_gain_effect = {
      CHANGE = 2
    }
  }
  gamer_lifestyle_rank_up_check_effect = yes
  gaming_calculate_game_result_effect = yes
  if = {
    limit = {
      local_var:gaming_type = gaming_type_chess
    }
    add_character_modifier = {
      modifier = gaming_chess_modifier
      months = gaming_host_cooldown
    }
  }
  else_if = {
    limit = {
      local_var:gaming_type = gaming_type_go
    }
    add_character_modifier = {
      modifier = gaming_go_modifier
      months = gaming_host_cooldown
    }
  }
  else_if = {
    limit = {
      local_var:gaming_type = gaming_type_wargame
    }
    add_character_modifier = {
      modifier = gaming_wargame_modifier
      months = gaming_host_cooldown
    }
  }
  scope:activity = {
    complete_activity = yes
  }
}

# Effect deciding the outcome of the match
gaming_calculate_game_result_effect = {
  if = {
    limit = {
      root.var:gaming_winning_chance > gaming_slight_win_threshold
    }
    custom_tooltip = gaming_slight_win
    add_prestige = 10
  }
  else_if = {
    limit = {
      root.var:gaming_winning_chance > gaming_decisive_win_threshold
    }
    custom_tooltip = gaming_decisive_win
    add_prestige = 25
  }
  else_if = {
    limit = {
      root.var:gaming_winning_chance > gaming_crushing_win_threshold
    }
    custom_tooltip = gaming_crushing_win
    add_prestige = 40
  }
  else_if = {
    limit = {
      root.var:gaming_winning_chance > gaming_slight_loss_threshold
    }
    custom_tooltip = gaming_slight_loss
    add_prestige = 10
  }
  else_if = {
    limit = {
      root.var:gaming_winning_chance > gaming_decisive_loss_threshold
    }
    custom_tooltip = gaming_decisive_loss
    add_prestige = -25
  }
  else_if = {
    limit = {
      root.var:gaming_winning_chance < gaming_crushing_loss_threshold
    }
    custom_tooltip = gaming_crushing_loss
    add_prestige = -40
  }
  else = {
    custom_tooltip = gaming_draw
    add_prestige = 5
  }
}
