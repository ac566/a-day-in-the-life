# Tracks number of events a character has had, then fires more if under the limit
gaming_event_loop_effect = {
	if = {
		limit = {
			NOT = {
				exists = var:num_gaming_events
			}
		}
		set_variable = {
			name = num_gaming_events
			value = 1
		}
		gaming_fire_correct_or_default_event_effect = yes
	}
	else_if = {
		limit = {
			var:num_gaming_events < max_default_gaming_events
		}
		change_variable = {
			name = num_gaming_events
			add = 1
		}
		gaming_fire_correct_or_default_event_effect = yes
	}
	else = {
		gaming_events_end_effect = yes
	}
}

# Fires event depending on game type and whether the character is a player vs. spectator
gaming_fire_correct_or_default_event_effect = {
	if = {
		limit = {
			local_var:gaming_type = gaming_type_chess
		}
		if = {
			limit = {
				gaming_has_opponent_trigger = yes
			}
			trigger_event = {
				on_action = gaming_chess_event_selection
				days = {
					min_gaming_event_spacing
					max_gaming_event_spacing
				}
			}
		}
		else = {
			trigger_event = {
				on_action = gaming_chess_spectator_event_selection
				days = {
					min_gaming_event_spacing
					max_gaming_event_spacing
				}
			}
		}
	}
	else_if = {
		limit = {
			local_var:gaming_type = gaming_type_go
		}
		if = {
			limit = {
				gaming_has_opponent_trigger = yes
			}
			trigger_event = {
				on_action = gaming_go_event_selection
				days = {
					min_gaming_event_spacing
					max_gaming_event_spacing
				}
			}
		}
		else = {
			trigger_event = {
				on_action = gaming_go_spectator_event_selection
				days = {
					min_gaming_event_spacing
					max_gaming_event_spacing
				}
			}
		}
	}
	else_if = {
		limit = {
			local_var:gaming_type = gaming_type_wargame
		}
		if = {
			limit = {
				gaming_has_opponent_trigger = yes
			}
			trigger_event = {
				on_action = gaming_wargame_event_selection
				days = {
					min_gaming_event_spacing
					max_gaming_event_spacing
				}
			}
		}
		else = {
			trigger_event = {
				on_action = gaming_wargame_spectator_event_selection
				days = {
					min_gaming_event_spacing
					max_gaming_event_spacing
				}
			}
		}
	}
}

# Broadcast that this character is done with his events
gaming_events_end_effect = {
	remove_variable = num_gaming_events
	save_temporary_scope_as = finished_participant
	if = {
		limit = {
			exists = scope:activity
		}
		scope:activity = {
			add_to_variable_list = {
				name = finished_participants
				target = scope:finished_participant
			}
		}
	}
	else = {
		add_to_variable_list = {
			name = finished_participants
			target = scope:finished_participant
		}
	}
}
