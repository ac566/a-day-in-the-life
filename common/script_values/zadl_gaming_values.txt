min_default_gaming_events = 1
max_default_gaming_events = 1
# NOT USED
chance_of_extra_gaming_events = 0
# Spacing
gaming_initial_event_delay = 5
min_gaming_event_spacing = 3
max_gaming_event_spacing = 8
max_gaming_duration = {
	value = 0
	add = max_gaming_event_spacing
	multiply = max_default_gaming_events
	add = gaming_initial_event_delay
	add = 1	# To be sure no values get set on the last tick
}

# Gamer trait rank tracking
gamer_rank_up_1_threshold = 8
gamer_rank_up_2_threshold = 16
gamer_rank_up_3_threshold = 24
# Stress Loss
gaming_stress_loss_value = -30
standard_gaming_tournament_cooldown_time = 1825
# Game type enumeration
gaming_type_chess = 0
gaming_type_go = 1
gaming_type_wargame = 2
# Cooldowns
gaming_host_cooldown = 3
gaming_guest_cooldown = 3
# Advantage calculations
gaming_small_advantage = 40
gaming_medium_advantage = 80
gaming_large_advantage = 160
gaming_advantage = {
	value = 0
	# Reward having skills that match game type
	if = {
		limit = {
			local_var:gaming_type = gaming_type_chess
		}
		add = this.martial
		add = this.learning
	}
	else_if = {
		limit = {
			local_var:gaming_type = gaming_type_go
		}
		add = {
			value = this.learning
			multiply = 2
		}
	}
	else_if = {
		limit = {
			local_var:gaming_type = gaming_type_wargame
		}
		add = {
			value = this.martial
			multiply = 2
		}
	}
	subtract = 16	# penalize/reward below/above average skills
	multiply = 5
	if = {
		limit = {
			has_trait = t_gamer_1
		}
		add = 25
	}
	else_if = {
		limit = {
			has_trait = t_gamer_2
		}
		add = 50
	}
	else_if = {
		limit = {
			has_trait = t_gamer_3
		}
		add = 100
	}
}

# Win chance, the higher the value more often a draw will occur
gaming_default_win_chance = 10
# Win calculation
gaming_slight_win_threshold = {
	value = var:current_opponent.var:current_advantage
	add = gaming_default_win_chance
}

gaming_decisive_win_threshold = {
	value = gaming_slight_win_threshold
	add = gaming_default_win_chance
}

gaming_crushing_win_threshold = {
	value = gaming_decisive_win_threshold
	add = gaming_default_win_chance
}

# Loss calculation
gaming_slight_loss_threshold = {
	value = var:current_opponent.var:current_advantage
	subtract = gaming_default_win_chance
}

gaming_decisive_loss_threshold = {
	value = gaming_slight_loss_threshold
	subtract = gaming_default_win_chance
}

gaming_crushing_loss_threshold = {
	value = gaming_decisive_loss_threshold
	subtract = gaming_default_win_chance
}
