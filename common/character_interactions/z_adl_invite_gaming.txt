invite_gaming_interaction = {
	category = interaction_category_friendly
	desc = invite_gaming_interaction_desc
	common_interaction = yes
	popup_on_receive = yes
	is_shown = {
		scope:actor = {
			OR = {
				has_focus = martial_strategy_focus
				has_trait = lifestyle_gamer
				has_trait = strategist
			}
		}
		scope:recipient = {
      NOT = {
        this = scope:actor
      }
			OR = {
				martial >= 12
				has_trait = education_martial
			}
		}
	}
	is_valid_showing_failures_only = {
    custom_description = {
      text = gaming_character_unavailable
      subject = scope:recipient
      scope:recipient = {
        is_available_for_activity_trigger = yes
      }
    }
		custom_description = {
			text = gaming_actor_recently_gamed
			scope:actor = {
				NOR = {
					has_character_modifier = gaming_chess_modifier
					has_character_modifier = gaming_go_modifier
					has_character_modifier = gaming_wargame_modifier
				}
			}
		}
		custom_description = {
      text = gaming_recipient_recently_gamed
      subject = scope:recipient
			scope:recipient = {
        NOR = {
          has_character_modifier = gaming_chess_modifier
          has_character_modifier = gaming_go_modifier
          has_character_modifier = gaming_wargame_modifier
        }
      }
		}
	}
	# Can only invite one character to game at a time
	can_send = {
		scope:actor = {
			NOT = {
				exists = var:currently_gaming
			}
		}
	}
	on_send = {
		# Add variable for who we are gaming with
		hidden_effect = {
			scope:actor = {
				set_variable = {
					name = currently_gaming
					value = scope:recipient
				}
			}
		}
	}
	on_accept = {
		scope:actor = {
      capital_province = {
        spawn_activity = {
          type = activity_gaming
					owner = scope:actor
				}
			}
      trigger_event = gaming.0001
		}
	}
	on_decline = {
		scope:actor = {
			trigger_event = gaming.0002
			remove_variable = currently_gaming
		}
	}
	ai_min_reply_days = 1
	ai_max_reply_days = 5
	ai_accept = {
		base = 10
	}
	ai_targets = {
		ai_recipients = neighboring_rulers
	}
	ai_frequency = 1000
	ai_will_do = {
		base = -1000
	}
}
