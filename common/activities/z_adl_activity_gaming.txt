activity_gaming = {
	expiration_days = 120
	frame = 1
	has_activity_window = yes
  days_until_auto_start = 10
	color = {
		0.253906
		0.867188
		0.105469
		1
	}
	valid = {
		activity_owner = {
			is_alive = yes
			is_imprisoned = no
			trigger_if = {
				limit = {
					exists = var:currently_gaming
				}
				var:currently_gaming = {
					is_alive = yes
					is_imprisoned = no
				}
			}
		}
	}
	on_spawn = {
		invite_character_to_activity = activity_owner
		accept_invitation_for_character = activity_owner
		# If we invited a character directly, formally invite and accept them
		if = {
			limit = {
				exists = activity_owner.var:currently_gaming
			}
			invite_character_to_activity = activity_owner.var:currently_gaming
			accept_invitation_for_character = activity_owner.var:currently_gaming
		}
	}
	on_activate = {
		# Add each participant to list of opponents so that we can match them up
		every_participant = {
			add_to_list = potential_opponents
		}
		# Trigger Guest and Host events
		every_participant = {
			# Guest events
			if = {
				limit = {
					NOT = {
						this = scope:activity.activity_owner
					}
				}
				remove_variable = booked_for_a_party
			}
			# Trigger host event
			else = {
				trigger_event = {
          id = gaming.2001
          days = 5
        }
			}
			if = {
				limit = {
					NOT = {
						exists = var:gaming_opponent
					}
				}
				# Save current in list's scope
				save_temporary_scope_as = current_in_list
				# Remove current guest from list of potential opponents
				remove_from_list = potential_opponents
				random_in_list = {
					list = potential_opponents
					# Save random choice's scope
					save_temporary_scope_as = random_choice
					set_variable = {
						name = gaming_opponent
						value = scope:current_in_list
					}
					scope:current_in_list = {
						set_variable = {
							name = gaming_opponent
							value = scope:random_choice
						}
					}
				}
				remove_from_list = potential_opponents
			}
		}
	}
	on_complete = {
		activity_owner = {
			remove_variable = currently_gaming
		}
		every_participant = {
			remove_variable = gaming_opponent
		}
	}
	on_expire = {
		# Should never happen - kept as fallback for weirdness only
		activity_owner = {
			trigger_event = gaming.2002
		}
	}
	on_participant_death = {
	}
	on_invalidated = {
		activity_owner = {
			save_scope_as = host
		}
		every_participant = {
			limit = {
				NOT = {
					this = scope:host
				}
			}
			add_to_list = gaming_participants
		}
		complete_activity = yes
	}
}
