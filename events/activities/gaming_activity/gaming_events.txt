####################################################
#
# 0001-0999 - Invitations and letters
# 1000-1999 - Setup events
# 8000-8999 - End of rount/maintenance
# 9000-9999 - End of activity
#
####################################################
namespace = gaming
#######################################
# 0001-0999 - Invitations and Responses
#######################################
## Invite guest to tournament
gaming.0999 = {
	type = letter_event
	opening = {
		desc = gaming.0999.opening
	}
	desc = gaming.0999.desc
	sender = scope:sender
	# Check if character is still valid
	trigger = {
		gaming_tournament_valid_player_trigger = yes
		NOT = {
			exists = var:is_handling_gaming_tournament_invitation
		}
	}
	# Try resending letter if it got lost
	on_trigger_fail = {
		if = {
			limit = {
				gaming_tournament_valid_player_trigger = yes
				exists = var:is_handling_gaming_tournament_invitation
			}
			trigger_event = {
				id = gaming.0999
				days = 1
			}
		}
	}
	#
	immediate = {
		scope:activity.activity_owner = {
			save_scope_as = sender
		}
		set_variable = {
			name = is_handling_gaming_tournament_invitation
			value = scope:sender
			days = 30
		}
	}
	# Options
	## Accept
	option = {
		name = gaming.0999.a
		scope:activity = {
			accept_invitation_for_character = prev
		}
		set_variable = {
			name = booked_for_a_party
			value = scope:sender
			days = 30
		}
		gaming_guest_stress_loss_effect = yes
		# AI
		ai_chance = {
			base = 100
			opinion_modifier = {
				multiplier = 1
				opinion_target = scope:sender
			}
		}
	}
	## Decline
	option = {
		name = gaming.0999.b
		scope:activity = {
			decline_invitation_for_character = prev
		}
		# AI
		ai_chance = {
			base = 10
			modifier = {
				add = 15
				scope:sender = {
					target_is_liege_or_above = scope:sender
				}
			}
			ai_value_modifier = {
				ai_boldness = 0.2
			}
		}
	}
	# After
	after = {
		remove_variable = is_handling_gaming_tournament_invitation
	}
}

# Character accepts match invite
gaming.0500 = {
	type = letter_event
	opening = {
		desc = gaming.0500.opening
	}
	desc = gaming.0500.desc
	sender = scope:recipient
	option = {
		name = gaming.0500.a
	}
	after = {
		trigger_event = {
			id = gaming.1500
			days = 5
		}
	}
}

# Character declines match invite
gaming.0501 = {
	type = letter_event
	opening = {
		desc = gaming.0501.opening
	}
	desc = gaming.0501.desc
	sender = scope:recipient
	option = {
		name = gaming.0501.a
	}
}

#######################
# 1000 - 1999 - Startup
#######################
## Host startup
gaming.1000 = {
	type = character_event
	title = gaming.1000.t
	desc = gaming.1000.desc
	theme = martial
	right_portrait = {
		character = root
		animation = happiness
	}
	trigger = {
		this = scope:activity.activity_owner
	}
	# Give options to decide which game to play
	## Chess
	option = {
		name = gaming.1000.a
		custom_tooltip = gaming.1000.a.tt
		trigger_event = gaming_chess.0999
		# AI
		ai_chance = {
			base = 0
			modifier = {
				add = {
					add = root.martial
					add = root.learning
					divide = 2
				}
			}
		}
	}
	## Go
	option = {
		name = gaming.1000.b
		custom_tooltip = gaming.1000.b.tt
		trigger_event = gaming_go.0999
		# AI
		ai_chance = {
			base = 0
			modifier = {
				add = {
					add = root.learning
					multiply = 2
				}
			}
		}
	}
	## Wargame
	option = {
		name = gaming.1000.c
		custom_tooltip = gaming.1000.c.tt
		trigger_event = gaming_wargame.0999
		# AI
		ai_chance = {
			base = 0
			modifier = {
				add = {
					add = root.martial
					multiply = 2
				}
			}
		}
	}
}

# Invitation startup
gaming.1500 = {
	type = character_event
	title = gaming.1500.t
	desc = gaming.1500.desc
	theme = martial
	right_portrait = {
		character = root
		animation = happiness
	}
	left_portrait = {
		character = var:gaming_opponent
		animation = happiness
	}
	# Give options to decide which game to play
	## Chess
	option = {
		name = gaming.1500.a
		custom_tooltip = gaming.1500.a.tt
		trigger_event = gaming_chess.0500
		# AI
		ai_chance = {
			base = 0
			modifier = {
				add = {
					add = root.martial
					add = root.learning
					divide = 2
				}
			}
		}
	}
	## Go
	option = {
		name = gaming.1500.b
		custom_tooltip = gaming.1500.b.tt
		trigger_event = gaming_go.0500
		# AI
		ai_chance = {
			base = 0
			modifier = {
				add = {
					add = root.learning
					multiply = 2
				}
			}
		}
	}
	## Wargame
	option = {
		name = gaming.1500.c
		custom_tooltip = gaming.1500.c.tt
		trigger_event = gaming_wargame.0500
		# AI
		ai_chance = {
			base = 0
			modifier = {
				add = {
					add = root.martial
					multiply = 2
				}
			}
		}
	}
}

############################
# 8000 - 8999 - Round Events
############################
# End of round
gaming.8000 = {
	type = character_event
	hidden = yes
	trigger = {
		exists = scope:activity
	}
	immediate = {
		if = {
			limit = {
				OR = {
					# Check if every one is done
					scope:activity = {
						any_participant = {
							count = all
							trigger_if = {
								limit = {
									gaming_valid_participant_trigger = yes
								}
								save_temporary_scope_as = participant_check
								scope:activity = {
									is_target_in_variable_list = {
										name = finished_participants
										target = scope:participant_check
									}
								}
							}
							trigger_else = {
								always = yes
							}
						}
					}
					# Or if we ran out of patience and just want to end this cycle
					AND = {
						trigger_if = {
							limit = {
								exists = scope:activity.var:attempted_to_end_round
							}
							scope:activity.var:attempted_to_end_round > 2
						}
						trigger_else = {
							always = no
						}
					}
				}
			}
			gaming_tournament_end_round_effect = yes
		}
		# Retrigger the event in the future, hopefully people click their events
		else = {
			# Keep track of how many times we tried to end
			if = {
				limit = {
					NOT = {
						exists = scope:activity.var:attempted_to_end_round
					}
				}
				scope:activity = {
					set_variable = {
						name = attempted_to_end_round
						value = 1
					}
				}
			}
			else = {
				scope:activity = {
					change_variable = {
						name = attempted_to_end_round
						add = 1
					}
				}
			}
			trigger_event = {
				id = gaming.8000
				days = 5
			}
		}
	}
}

# Start next round or end tournament
gaming.8001 = {
	type = character_event
	hidden = yes
	trigger = {
		exists = scope:activity
	}
	immediate = {
		scope:activity = {
			every_participant = {
				limit = {
					NOT = {
						has_variable = gaming_lost
					}
					gaming_valid_participant_trigger = yes
				}
				add_to_temporary_list = winners
			}
			if = {
				limit = {
					list_size = {
						name = winners
						value < 2
					}
				}
				any_in_list = {
					list = winners
					count = 1
					save_scope_as = winner
					scope:activity = {
						set_variable = {
							name = winner
							value = scope:winner
						}
					}
				}
				gaming_tournament_end_effect = yes
			}
			else = {
				gaming_tournament_setup_effect = yes
			}
		}
	}
}

# Invitation end match
gaming.8500 = {
	type = character_event
	hidden = yes
	immediate = {
		if = {
			limit = {
				OR = {
					AND = {
						is_target_in_variable_list = {
							name = finished_participants
							target = root
						}
						is_target_in_variable_list = {
							name = finished_participants
							target = root.var:current_opponent
						}
					}
					AND = {
						trigger_if = {
							limit = {
								exists = var:attempted_to_end_round
							}
							var:attempted_to_end_round > 2
						}
						trigger_else = {
							always = no
						}
					}
				}
			}
			gaming_invite_end_effect = yes
		}
		else = {
			if = {
				limit = {
					NOT = {
						exists = var:attempted_to_end_round
					}
				}
				set_variable = {
					name = attempted_to_end_round
					value = 1
				}
			}
			else = {
				change_variable = {
					name = attempted_to_end_round
					add = 1
				}
			}
			trigger_event = {
				id = gaming.8500
				days = 5
			}
		}
	}
}

##########################
# 9000 - 9999 - End Events
##########################
# Host end event
gaming.9000 = {
	type = character_event
	title = gaming.9000.t
	desc = gaming.9000.desc
	theme = martial
	right_portrait = {
		character = root
		animation = happiness
	}
	option = {
		name = gaming.9000.a
	}
	immediate = {
		scope:activity = {
			every_participant = {
				limit = {
					gaming_valid_participant_trigger = yes
					NOT = {
						this = scope:activity.activity_owner
					}
				}
				trigger_event = gaming.9001
			}
		}
	}
	after = {
		scope:activity = {
			complete_activity = yes
		}
	}
}

# Guest end event
gaming.9001 = {
	type = character_event
	title = gaming.9001.t
	desc = gaming.9001.desc
	theme = martial
	right_portrait = {
		character = root
		animation = happiness
	}
	left_portrait = {
		character = scope:activity.activity_owner
		animation = happiness
	}
	trigger = {
		NOT = {
			this = scope:activity.activity_owner
		}
	}
	option = {
		name = gaming.9001.a
	}
}

# Activity no longer valid
gaming.9100 = {
	type = character_event
	title = gaming.9100.t
	desc = gaming.9100.desc
	theme = martial
	left_portrait = root
	option = {
		name = gaming.9100.a
		scope:activity = {
			complete_activity = yes
		}
	}
}
